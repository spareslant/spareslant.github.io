<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on SpareSlant Technical Blog</title>
    <link>/posts/</link>
    <description>Recent content in Posts on SpareSlant Technical Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 09 Mar 2020 18:46:41 +0000</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Blogger python cli</title>
      <link>/posts/blogger_python_cli/</link>
      <pubDate>Mon, 09 Mar 2020 18:46:41 +0000</pubDate>
      
      <guid>/posts/blogger_python_cli/</guid>
      <description>Introduction We will be creating a commandLine utility in python to upload a post in Google blogger.
Account Preparation  You need to have a google account (gmail) (Paid account NOT required). Once you have a google account, Login to https://console.developers.google.com/apis/credentials and create a new Project here. Click on Dashboard on left hand column, and click on + ENABLE APIS AND SERVICES.  Type in blogger in search bar, and select Blogger API v3 and then click ENABLE.</description>
    </item>
    
    <item>
      <title>Vim Vagrant Plugin using Vundle</title>
      <link>/posts/vim-vagrant-plugin/</link>
      <pubDate>Tue, 25 Feb 2020 17:13:09 +0000</pubDate>
      
      <guid>/posts/vim-vagrant-plugin/</guid>
      <description>Introduction We will be installing VIM vagrant plugin using Vundle. This assumes that you have already configured your VIM to use Vundle
A sample .vimrc file after installing Vundle is below. Vundle installation can be done by following this link https://github.com/VundleVim/Vundle.vim .
Preparation of Vagrantfile plugin for Vundle Create following structure of directories and files.
mkdir -p $HOME/.vim/vagrantfile/plugin touch $HOME/.vim/vagrantfile/plugin/vagrantfile.vim curl https://raw.githubusercontent.com/hashicorp/vagrant/master/contrib/vim/vagrantfile.vim -o $HOME/.vim/vagrantfile/plugin/vagrantfile.vim cd $HOME/.vim/vagrantfile git init . Note: It is important to have above structure and initialized it as a git repo.</description>
    </item>
    
    <item>
      <title>Apache ReverseProxySSL SSLClientAuth</title>
      <link>/posts/apache-reverseproxyssl-sslclientauth/</link>
      <pubDate>Sun, 04 Aug 2019 14:54:01 +0100</pubDate>
      
      <guid>/posts/apache-reverseproxyssl-sslclientauth/</guid>
      <description>Introduction We will be configuring Apache in reverse proxy mode. Apache will be accepting connections on secure port with SSL client authentication and forward that request to a backend application server Gunicorn. Communication between apache and gunicorn will also be on secure port and SSL authenticated. Gunicorn will run a simple flask app that will be writing some text to file.
Purpose of this excersize is to introduce end to end secure communication from client to apache to app server with SSL client authentication at every stage.</description>
    </item>
    
    <item>
      <title>Deploy HugoSite to Github</title>
      <link>/posts/deploy-hugosite-to-github/</link>
      <pubDate>Sat, 03 Aug 2019 19:01:43 +0100</pubDate>
      
      <guid>/posts/deploy-hugosite-to-github/</guid>
      <description>Run HTTP server to serve file locally to check the contents $ hugo server -D Do following change in md files that need to be published. Run HTTP server in prod mode and make sure all required files are being served. $ hugo server Git commit the changes $ git add &amp;lt;files&amp;gt; $ git commit $ git push origin master Prepare contents to be deployed to GITHUB $ cd MyTechnialBlog/ $ ls -og total 8 drwxr-xr-x 3 96 17 Jul 21:25 archetypes -rw-r--r-- 1 2067 17 Jul 21:40 config.</description>
    </item>
    
    <item>
      <title>Markup to Pdf/HTML</title>
      <link>/posts/markup-to-pdf/</link>
      <pubDate>Sat, 27 Jul 2019 20:39:13 +0100</pubDate>
      
      <guid>/posts/markup-to-pdf/</guid>
      <description>Introduction This documents shows the various ways to generate PDF and self contained HTML files.
Using VSCode extension. Install VSCode and install extension Markdown PDF. Write a new markup page in VSCode. When done, right click on the editor and you will see the options to export to PDF and HTML.
  pros
 Easy installation and generation of PDF Line wraps in code blocks.    cons</description>
    </item>
    
    <item>
      <title>Docker Logging With Rsyslog</title>
      <link>/posts/docker-logging-with-rsyslog/</link>
      <pubDate>Sat, 27 Jul 2019 12:15:28 +0100</pubDate>
      
      <guid>/posts/docker-logging-with-rsyslog/</guid>
      <description>Introduction This document will describe a simple strategy to logging for docker container using Rsyslog. Often we may have to run multiple containers on single machine. We may require logging for different container in different directories or files. This can be achieved using Rsyslog. Approach below is very generic and flexible and can be modified as per requirement easily.
Running Docker with syslog logging I use following command to run docker container.</description>
    </item>
    
    <item>
      <title>SSL Certificate Mutual Authentication</title>
      <link>/posts/ssl-certificate/</link>
      <pubDate>Wed, 17 Jul 2019 21:35:50 +0100</pubDate>
      
      <guid>/posts/ssl-certificate/</guid>
      <description>Introduction We will be creating our own CA (Certificate Authority), CSR (Certificate Signing Request), signed certificate. We will be creating server side and client side certificate and will verify them using openssl and curl.
Prepare environment os used $ cat /etc/fedora-release Fedora release 30 (Thirty) $ uname -a Linux localhost.localdomain 5.0.9-301.fc30.x86_64 #1 SMP Tue Apr 23 23:57:35 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux Prepare openssl conf files A reference conf file can be found in /etc/pki/tls/openssl.</description>
    </item>
    
  </channel>
</rss>
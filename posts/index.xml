<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on SpareSlant Technical Blog</title>
    <link>/posts/</link>
    <description>Recent content in Posts on SpareSlant Technical Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 25 Aug 2021 12:24:16 +0100</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>K8s Vagrant Private Registry Centos8 Crio Automated Deployment</title>
      <link>/posts/k8s-vagrant-private-registry-centos8-crio-automated-deployment/</link>
      <pubDate>Wed, 25 Aug 2021 12:24:16 +0100</pubDate>
      
      <guid>/posts/k8s-vagrant-private-registry-centos8-crio-automated-deployment/</guid>
      <description>Introduction  We will be creating a fully automated Vagrant based Kubernetes cluster deployment with private docker registry in separate VM. Following are the software versions used:  Hardware: MacBook Pro HostOS: MacOS Big Sur 11.5.2 Kube Version: 1.21.4 CRIO: 1.21 Cluster OS: Centos8 Stream   It is assumed that VirtualBox and Vagrant is already installed on your hostOS.  Vagrantfile  Create a directory and create a file named Vagrantfile with following contents in that directory.</description>
    </item>
    
    <item>
      <title>K8s Vagrant Centos Stream Crio Automated Deployment</title>
      <link>/posts/k8s-vagrant-centos-stream-crio-automated-deployment/</link>
      <pubDate>Mon, 23 Aug 2021 22:29:22 +0100</pubDate>
      
      <guid>/posts/k8s-vagrant-centos-stream-crio-automated-deployment/</guid>
      <description>Introduction  We will be creating a fully automated Vagrant based Kubernetes cluster deployment. Following are the software versions used:  Hardware: MacBook Pro HostOS: MacOS Big Sur 11.5.2 Kube Version: 1.21.4 CRIO: 1.21 Cluster OS: Centos8 Stream   It is assumed that VirtualBox and Vagrant is already installed on your hostOS.  Vagrantfile  Create a directory and create a file named Vagrantfile with following contents in that directory.</description>
    </item>
    
    <item>
      <title>Edit Json Easily Programatically</title>
      <link>/posts/edit-json-easily-programatically/</link>
      <pubDate>Fri, 14 May 2021 06:58:28 +0100</pubDate>
      
      <guid>/posts/edit-json-easily-programatically/</guid>
      <description>Introduction Often I had to manipulate the JSON/YAML files. I created a utility that can help make changes in JSON/YAML easily.
Get the code. git clone https://github.com/spareslant/json_manipulation.git cd json_manipulation Python version used $ python --version Python 3.9.0 How to Run: input_data_1.json contents { &amp;#34;data&amp;#34;: [ { &amp;#34;actions&amp;#34;: [ { &amp;#34;link&amp;#34;: &amp;#34;http://www.facebook.com/X999/posts/Y999&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Comment&amp;#34; }, { &amp;#34;link&amp;#34;: &amp;#34;http://www.facebook.com/X999/posts/Y999&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Like&amp;#34; } ], &amp;#34;created_time&amp;#34;: &amp;#34;2010-08-02T21:27:44+0000&amp;#34;, &amp;#34;from&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;X12&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Tom Brady&amp;#34; }, &amp;#34;id&amp;#34;: &amp;#34;X999_Y999&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;Looking forward to 2010!</description>
    </item>
    
    <item>
      <title>Kubernetes Cluster Using CRI-O</title>
      <link>/posts/kubernetes-cluster-cri-o/</link>
      <pubDate>Sun, 07 Feb 2021 22:18:02 +0000</pubDate>
      
      <guid>/posts/kubernetes-cluster-cri-o/</guid>
      <description>Introduction  We will be creating a 2 node kubernetes cluster using vagrant and virtualbox. We will be using cri-o rather than Docker to configure the cluster. CRI-O uses the systemd cgroup driver per default. We will be creating config files init-defaults.yml and join-defaults.yml to be used by kubeadm to configure control plane and worker rather than using long command line options. In the config files, we shall specify the cgroup driver for kubelet.</description>
    </item>
    
    <item>
      <title>Kubernetes Cluster Using Containerd</title>
      <link>/posts/kubernetes-cluster-containerd/</link>
      <pubDate>Sun, 07 Feb 2021 15:48:01 +0000</pubDate>
      
      <guid>/posts/kubernetes-cluster-containerd/</guid>
      <description>Introduction  We will be creating a 2 node kubernetes cluster using vagrant and virtualbox. We will be using containerd rather than Docker to configure the cluster. We will make sure containerduses systemd as its cgroup driver. We will be creating config files init-defaults.yml and join-defaults.yml to be used by kubeadm to configure control plane and worker rather than using long command line options. In the config files, we shall specify the cgroup driver.</description>
    </item>
    
    <item>
      <title>Multihop SSH Tunnel to access Vagrant VM Service</title>
      <link>/posts/multihop-ssh/</link>
      <pubDate>Tue, 05 Jan 2021 21:09:04 +0000</pubDate>
      
      <guid>/posts/multihop-ssh/</guid>
      <description>Multihop SSH tunnel to access Vagrant VM Service Following is the scenario:  A localmachine (192.168.0.17) A remote machine (192.168.0.19) Another vagrant machine (call it master) running inside above remote machine. This Vagrant VM has private IP 10.0.0.10. A web-service is listening on 10.0.0.10:31421 port inside Vagrant VM. We want this web-service to be accessible in the browser running in localmachine (i.e 192.168.0.17)  Get ssh port of Vagrant VM vagrant port master In my case it was 2200.</description>
    </item>
    
    <item>
      <title>Terraform Cdk</title>
      <link>/posts/terraform-cdk/</link>
      <pubDate>Mon, 28 Dec 2020 17:54:12 +0000</pubDate>
      
      <guid>/posts/terraform-cdk/</guid>
      <description>Introduction We will be exploring the terraform-cdk toolkit in this article. We shall be using an AWS account to spin up a VM. We shall be doing following.
 Create A brand New VPC (Not touching existing default VPC) Create 3 subnets ( 1 public, 2 private) A security Group to allow incoming SSH traffic and allow all outgoing. A key-pair for ssh An additional internet-gateway in AWS (It is needed to get internet connectity to new VPC.</description>
    </item>
    
    <item>
      <title>Kafka to Elk Message Manipulation</title>
      <link>/posts/kafka-to-elk-message-manipulation/</link>
      <pubDate>Thu, 21 May 2020 05:58:11 +0100</pubDate>
      
      <guid>/posts/kafka-to-elk-message-manipulation/</guid>
      <description>Introduction We will be creating a message flow starting from Kafka and ending in Kibana. Flow will be like below:
console app (to send json message) -&amp;gt; kafka -&amp;gt; logstash -&amp;gt; elasticSearch -&amp;gt; kibana
We will be using ruby filter to manipulate the message as well and docker to setup the environment.
Setup mkdir kafka-elk cd kafka-elk wget http://apache.mirror.anlx.net/kafka/2.5.0/kafka_2.13-2.5.0.tgz tar xvf kafka_2.13-2.5.0.tgz Note: We need kafka binaries to get the script that can send json message via console to kafka.</description>
    </item>
    
    <item>
      <title>Remote OpenStack Instances Using Goose library (using Nova networking)</title>
      <link>/posts/openstack-instances-using-goose-library/</link>
      <pubDate>Mon, 16 Mar 2020 23:04:49 +0000</pubDate>
      
      <guid>/posts/openstack-instances-using-goose-library/</guid>
      <description>Introduction: Following program uses goose library to spin instances in OpenStack environment. Program will also assign a public IP to first instance.
Requirments: An already running OpenStack environment. You can get a free playground for OpenStack to play with at http://trystack.org/. At minimum you need following information.
Auth URL : It may look like this http://10.0.2.15:5000/v2.0 UserName : This is a user in OpenStack. default: admin Password : This is an API password.</description>
    </item>
    
    <item>
      <title>Remote OpenStack instances using Gophercloud Library (using Nova Networking)</title>
      <link>/posts/openstack-instances-using-gophercloud-nova-networking/</link>
      <pubDate>Mon, 16 Mar 2020 22:46:24 +0000</pubDate>
      
      <guid>/posts/openstack-instances-using-gophercloud-nova-networking/</guid>
      <description>Introduction: Following program uses gophercloud library to spin instances in OpenStack environment.
Requirments: An already running OpenStack environment. You can get a free playground for OpenStack to play with at http://trystack.org/. At minimum you need following information.
Auth URL : It may look like this http://10.0.2.15:5000/v2.0 UserName : This is a user in OpenStack. default: admin Password : This is an API password. API password can be different from user password.</description>
    </item>
    
    <item>
      <title>Remote OpenStack Instances using Gophercloud (using neutron networking)</title>
      <link>/posts/remote-openstack-instances-gophercloud-neutron/</link>
      <pubDate>Mon, 16 Mar 2020 22:24:21 +0000</pubDate>
      
      <guid>/posts/remote-openstack-instances-gophercloud-neutron/</guid>
      <description>Introduction: Following program uses gophercloud library to spin instances in OpenStack environment. This program uses Neutron Networking. This program will also assign FloatingIP to very first instance.
Requirments: An already running OpenStack environment. You can get a free playground for OpenStack to play with at http://trystack.org/. At minimum you need following information.
Auth URL : It may look like this http://10.0.2.15:5000/v2.0 UserName : This is a user in OpenStack. default: admin Password : This is an API password.</description>
    </item>
    
    <item>
      <title>Json Full Paths From Root Node to Leaf</title>
      <link>/posts/json-full-paths-from-root-node-to-leaf/</link>
      <pubDate>Mon, 16 Mar 2020 22:09:29 +0000</pubDate>
      
      <guid>/posts/json-full-paths-from-root-node-to-leaf/</guid>
      <description>Introduction: Often there is a requirement to create full paths from root node to leaf node in JSON file. Following python program will generate these paths.
Sample JSON file sample_json_file.json is below:
{ &amp;#34;data&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;X999_Y999&amp;#34;, &amp;#34;from&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;Tom Brady&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;X12&amp;#34; }, &amp;#34;message&amp;#34;: &amp;#34;Looking forward to 2010!&amp;#34;, &amp;#34;actions&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Comment&amp;#34;, &amp;#34;link&amp;#34;: &amp;#34;http://www.facebook.com/X999/posts/Y999&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;Like&amp;#34;, &amp;#34;link&amp;#34;: &amp;#34;http://www.facebook.com/X999/posts/Y999&amp;#34; } ], &amp;#34;type&amp;#34;: &amp;#34;status&amp;#34;, &amp;#34;created_time&amp;#34;: &amp;#34;2010-08-02T21:27:44+0000&amp;#34;, &amp;#34;updated_time&amp;#34;: &amp;#34;2010-08-02T21:27:44+0000&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;X998_Y998&amp;#34;, &amp;#34;from&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;Peyton Manning&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;X18&amp;#34; }, &amp;#34;message&amp;#34;: &amp;#34;Where&amp;#39;s my contract?</description>
    </item>
    
    <item>
      <title>Saltstack Custom Execution Module With Arguments</title>
      <link>/posts/saltstack-custom-execution-module-with-arguments/</link>
      <pubDate>Mon, 16 Mar 2020 13:41:26 +0000</pubDate>
      
      <guid>/posts/saltstack-custom-execution-module-with-arguments/</guid>
      <description>Introduction: We will be creating a simple SaltStack execution module. And will see how can this module be called
 from a state file from command line  Pre-Requisites  salt-master installed and configured on a machine. I used fedora-24 VM. salt-minion installed and configured to accept command from salt-master.  /etc/salt/master file used:
log_level: debug fileserver_backend: - roots file_roots: base: - /srv/salt /etc/salt/minion file used:
master: salt Note: In /etc/salt/master file, log_level is set to debug.</description>
    </item>
    
    <item>
      <title>SaltStack: execute state modules on Master and minions from runner</title>
      <link>/posts/saltstack-call-state-modules-from-runner/</link>
      <pubDate>Mon, 16 Mar 2020 13:21:12 +0000</pubDate>
      
      <guid>/posts/saltstack-call-state-modules-from-runner/</guid>
      <description>Introduction: We will be creating a SaltStack runner module. This runner module will
 call a state module on salt-master itself execute a state file (hence state module) on a client machine  Pre-Requisites  salt-master installed and configured on a machine. I used fedora-24 VM. salt-minion installed and configured to accept command from salt-master.  /etc/salt/master file used:
log_level: debug fileserver_backend: - roots file_roots: base: - /srv/salt runner_dirs: - /srv/salt/_runners /etc/salt/minion file used:</description>
    </item>
    
    <item>
      <title>SaltStack: Execute custom execution module on Master using runner</title>
      <link>/posts/saltstack-execute-custom-execution/</link>
      <pubDate>Mon, 16 Mar 2020 08:37:22 +0000</pubDate>
      
      <guid>/posts/saltstack-execute-custom-execution/</guid>
      <description>Introduction: Execution modules are meant to executed on minions(clients). Therefore only a handful of execution/state modules are visible to salt-master. But sometimes we may need to execute our custom execution module on Master itself (most likely via runner). In order to do this salt-minion must be installed on Salt-Master box. And configure it to accept the commands from salt-master. This will be configured as a normal salt-minion. Nothing special needs to be done.</description>
    </item>
    
    <item>
      <title>Saltstack: Call runner from minion</title>
      <link>/posts/saltstack-call-runner-from-minion/</link>
      <pubDate>Sun, 15 Mar 2020 21:26:03 +0000</pubDate>
      
      <guid>/posts/saltstack-call-runner-from-minion/</guid>
      <description>Introduction: Sometimes a minion may need to execute something which is central to whole system. e.g. Minion may need to update an external common Database whose write access is given only to master. Therefore minion may need to ask salt-master to execute on its behalf. This can be done by
 Minion calling runner on salt-master runner executing a custom execution module that provides access to DB  As a custom execution module needs to be executed on salt-master, therefore salt-minion also needs to be installed on salt-master.</description>
    </item>
    
    <item>
      <title>Saltstack: Call runner from minion (jinja conditionals)</title>
      <link>/posts/saltstack-call-runner-from-minion-jinja/</link>
      <pubDate>Sun, 15 Mar 2020 21:05:23 +0000</pubDate>
      
      <guid>/posts/saltstack-call-runner-from-minion-jinja/</guid>
      <description>Introduction Sometimes a minion may need to execute something which is central to whole system but based on some condition. e.g. Minion may need to update an external common Database whose write access is given only to master. Therefore minion may need to ask salt-master to execute on its behalf. This can be done by
 Minion calling runner on salt-master runner executing a custom execution module that provides access to DB  As a custom execution module needs to be executed on salt-master, therefore salt-minion also needs to be installed on salt-master.</description>
    </item>
    
    <item>
      <title>Very Simple Template Substitutions Using Python Perl</title>
      <link>/posts/very-simple-template-substitutions-using-python-perl/</link>
      <pubDate>Sun, 15 Mar 2020 20:50:05 +0000</pubDate>
      
      <guid>/posts/very-simple-template-substitutions-using-python-perl/</guid>
      <description>Introduction It is quite common to treat text files as templates which contains place holders that will be replaced by some real values. Python jinja or Ruby erb template engines are there to resolve for these kind of issues. They are quite feature rich. Following is a very simple Template substitution program in Python and Perl that does similar kind of job. Its very basic but works for simple scenarios.</description>
    </item>
    
    <item>
      <title>Minimal Working Tmux Config</title>
      <link>/posts/minimal-working-tmux-config/</link>
      <pubDate>Sun, 15 Mar 2020 20:33:04 +0000</pubDate>
      
      <guid>/posts/minimal-working-tmux-config/</guid>
      <description>Minimal working tmux config Populate $HOME/.tmux.conf with following contents
set -g default-terminal &amp;quot;screen-256color&amp;quot; set -g history-limit 99999 # setw -g status-utf8 on # status line background colour will be the colour of terminal in background set -g status-bg default setw -g display-time 5000 #################################################################################################### # settings for TMUX widnows status decorations # #################################################################################################### # status format for both last-active-window and all the windows before last-active # commas are escaped using # char in below statement.</description>
    </item>
    
    <item>
      <title>Blogger Go Cli</title>
      <link>/posts/blogger-go-cli/</link>
      <pubDate>Sat, 14 Mar 2020 21:16:00 +0000</pubDate>
      
      <guid>/posts/blogger-go-cli/</guid>
      <description>Introduction We will be creating a commandLine utility in Go to upload a post in Google blogger.
Account Preparation   You need to have a google account (gmail) (Paid account NOT required).
  Once you have a google account, Login to https://console.developers.google.com/apis/credentials and create a new Project here.
  Click on Dashboard on left hand column, and click on + ENABLE APIS AND SERVICES.
 Type in blogger in search bar, and select Blogger API v3 and then click ENABLE.</description>
    </item>
    
    <item>
      <title>Multiple Vms Vagrantfile</title>
      <link>/posts/multiple-vms-vagrantfile/</link>
      <pubDate>Tue, 10 Mar 2020 17:50:49 +0000</pubDate>
      
      <guid>/posts/multiple-vms-vagrantfile/</guid>
      <description>Introduction A Vagrantfile for multiple VMS.
Prepare Environment mkdir Vagrant_VMS cd Vagrant_VMS vagrant init Populate Vagrantfile with following contents. all_hosts = [ { vagrant_hostname: &amp;#34;amachine&amp;#34;, full_hostname: &amp;#34;amachine.virtual.machine&amp;#34;, vmbox: &amp;#34;fedora/31-cloud-base&amp;#34;, vmbox_version: &amp;#34;31.20191023.0&amp;#34;, ip: &amp;#34;10.0.0.10&amp;#34;, memory: 2048, cpus: 1 }, # { # vagrant_hostname: &amp;#34;anotherMachine&amp;#34;, # full_hostname: &amp;#34;another.virtual.machine&amp;#34;, # vmbox: &amp;#34;fedora/31-cloud-base&amp;#34;, # vmbox_version: &amp;#34;31.20191023.0&amp;#34;, # ip: &amp;#34;10.0.0.12&amp;#34;, # memory: 2048, # cpus: 1 # }, ] # individual machine names must be mentioned is below command line in # order to bring machines.</description>
    </item>
    
    <item>
      <title>Convert markup to blogger compatible html</title>
      <link>/posts/convert_markup_to_blogger_compatible_html/</link>
      <pubDate>Tue, 10 Mar 2020 11:12:00 +0000</pubDate>
      
      <guid>/posts/convert_markup_to_blogger_compatible_html/</guid>
      <description>Introduction We will be converting a markup file to a blogger compatible html.
Install pandoc and GitHUB html5 Template Install pandoc using URL https://pandoc.org/installing.html . Create a workspace and clone following git repos in that workspace area.
mkdir $HOME/panDocs cd $HOME/panDocs git clone https://github.com/tajmone/pandoc-goodies.git cd pandoc-goodies/templates/html5/github/src Modify above GitHUB html5 template source code for blogger. Make the padding and max-width changes in _github-markdown.scss file as follows:
$ git diff templates/html5/github/src/_github-markdown.scss diff --git a/templates/html5/github/src/_github-markdown.</description>
    </item>
    
    <item>
      <title>Blogger ruby cli</title>
      <link>/posts/blogger-ruby-cli/</link>
      <pubDate>Tue, 10 Mar 2020 00:34:42 +0000</pubDate>
      
      <guid>/posts/blogger-ruby-cli/</guid>
      <description>Introduction We will be creating a commandLine utility in ruby to upload a post in Google blogger.
Account Preparation   You need to have a google account (gmail) (Paid account NOT required).
  Once you have a google account, Login to https://console.developers.google.com/apis/credentials and create a new Project here.
  Click on Dashboard on left hand column, and click on + ENABLE APIS AND SERVICES.
 Type in blogger in search bar, and select Blogger API v3 and then click ENABLE.</description>
    </item>
    
    <item>
      <title>Blogger python cli</title>
      <link>/posts/blogger-python-cli/</link>
      <pubDate>Mon, 09 Mar 2020 18:46:41 +0000</pubDate>
      
      <guid>/posts/blogger-python-cli/</guid>
      <description>Introduction We will be creating a commandLine utility in python to upload a post in Google blogger.
Account Preparation   You need to have a google account (gmail) (Paid account NOT required).
  Once you have a google account, Login to https://console.developers.google.com/apis/credentials and create a new Project here.
  Click on Dashboard on left hand column, and click on + ENABLE APIS AND SERVICES.
 Type in blogger in search bar, and select Blogger API v3 and then click ENABLE.</description>
    </item>
    
    <item>
      <title>Vim Vagrant Plugin using Vundle</title>
      <link>/posts/vim-vagrant-plugin/</link>
      <pubDate>Tue, 25 Feb 2020 17:13:09 +0000</pubDate>
      
      <guid>/posts/vim-vagrant-plugin/</guid>
      <description>Introduction We will be installing VIM vagrant plugin using Vundle. This assumes that you have already configured your VIM to use Vundle
A sample .vimrc file after installing Vundle is below. Vundle installation can be done by following this link https://github.com/VundleVim/Vundle.vim .
set nocompatible &amp;quot; be iMproved, required filetype off &amp;quot; required &amp;quot; set the runtime path to include Vundle and initialize set rtp+=~/.vim/bundle/Vundle.vim call vundle#begin() Plugin &#39;VundleVim/Vundle.vim&#39; &amp;quot; All of your Plugins must be added before the following line call vundle#end() &amp;quot; required set tabstop=4 set expandtab set softtabstop=4 set shiftwidth=4 filetype indent on syntax on &amp;quot; color desert &amp;quot; color lettuce Preparation of Vagrantfile plugin for Vundle Create following structure of directories and files.</description>
    </item>
    
    <item>
      <title>Apache ReverseProxySSL SSLClientAuth</title>
      <link>/posts/apache-reverseproxyssl-sslclientauth/</link>
      <pubDate>Sun, 04 Aug 2019 14:54:01 +0100</pubDate>
      
      <guid>/posts/apache-reverseproxyssl-sslclientauth/</guid>
      <description>Introduction We will be configuring Apache in reverse proxy mode. Apache will be accepting connections on secure port with SSL client authentication and forward that request to a backend application server Gunicorn. Communication between apache and gunicorn will also be on secure port and SSL authenticated. Gunicorn will run a simple flask app that will be writing some text to file.
Purpose of this excersize is to introduce end to end secure communication from client to apache to app server with SSL client authentication at every stage.</description>
    </item>
    
    <item>
      <title>Deploy HugoSite to Github</title>
      <link>/posts/deploy-hugosite-to-github/</link>
      <pubDate>Sat, 03 Aug 2019 19:01:43 +0100</pubDate>
      
      <guid>/posts/deploy-hugosite-to-github/</guid>
      <description>Run HTTP server to serve file locally to check the contents $ hugo server -D Do following change in md files that need to be published. change draft: true to draft: false Run HTTP server in prod mode and make sure all required files are being served. $ hugo server Git commit the changes $ git add &amp;lt;files&amp;gt; $ git commit $ git push origin master Prepare contents to be deployed to GITHUB $ cd MyTechnialBlog/ $ ls -og total 8 drwxr-xr-x 3 96 17 Jul 21:25 archetypes -rw-r--r-- 1 2067 17 Jul 21:40 config.</description>
    </item>
    
    <item>
      <title>Markup to Pdf/HTML</title>
      <link>/posts/markup-to-pdf/</link>
      <pubDate>Sat, 27 Jul 2019 20:39:13 +0100</pubDate>
      
      <guid>/posts/markup-to-pdf/</guid>
      <description>Introduction This documents shows the various ways to generate PDF and self contained HTML files.
Using VSCode extension. Install VSCode and install extension Markdown PDF. Write a new markup page in VSCode. When done, right click on the editor and you will see the options to export to PDF and HTML.
  pros
 Easy installation and generation of PDF Line wraps in code blocks.    cons</description>
    </item>
    
    <item>
      <title>Docker Logging With Rsyslog</title>
      <link>/posts/docker-logging-with-rsyslog/</link>
      <pubDate>Sat, 27 Jul 2019 12:15:28 +0100</pubDate>
      
      <guid>/posts/docker-logging-with-rsyslog/</guid>
      <description>Introduction This document will describe a simple strategy to logging for docker container using Rsyslog. Often we may have to run multiple containers on single machine. We may require logging for different container in different directories or files. This can be achieved using Rsyslog. Approach below is very generic and flexible and can be modified as per requirement easily.
Running Docker with syslog logging I use following command to run docker container.</description>
    </item>
    
    <item>
      <title>SSL Certificate Mutual Authentication</title>
      <link>/posts/ssl-certificate/</link>
      <pubDate>Wed, 17 Jul 2019 21:35:50 +0100</pubDate>
      
      <guid>/posts/ssl-certificate/</guid>
      <description>Introduction We will be creating our own CA (Certificate Authority), CSR (Certificate Signing Request), signed certificate. We will be creating server side and client side certificate and will verify them using openssl and curl.
Prepare environment os used $ cat /etc/fedora-release Fedora release 30 (Thirty) $ uname -a Linux localhost.localdomain 5.0.9-301.fc30.x86_64 #1 SMP Tue Apr 23 23:57:35 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux Prepare openssl conf files A reference conf file can be found in /etc/pki/tls/openssl.</description>
    </item>
    
  </channel>
</rss>
